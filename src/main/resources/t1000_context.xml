<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
default-lazy-init="true"
	>
	
	<import resource="toshiba_context.xml" />
	<import resource="sony_context.xml" />
	<import resource="db_context.xml" />

	<bean id="t1000" class="ru.javabegin.training.spring.impls.robot.ModelT1000" parent="baseModel">

		<constructor-arg value="silver" index="3" type="String" />
		<constructor-arg value="2005" index="4" type="int" />
		<constructor-arg value="true" index="5" type="boolean" />

		<property name="hand" ref="sonyHand"/>
	</bean>

	<!--
	метод
	paren - это наследование бинов.
	Необходим для того, чтобы не дублировать код в xml.
	В нашем случае - бин t1000 наследуется от бина baseModel
	со всеми его конструкторами.
	Если наследование не выполнить, то пришлось бы
	дублировать конструкторы бина baseModel  в бине t1000.

	Также не забываем об индексах,
	которые соответствуют порядку пременных в конструкторе.
	В нашем случае сначала индексы в бине baseModel а затем в бине t1000.

	Внимание !
	в бине baseModel мы даже не указываем класс, просто id.
	-->
	

	<bean id="baseModel" abstract="true">

		<constructor-arg ref="sonyHand" index="0"/>
		<constructor-arg ref="sonyLeg" index="1"/>
		<constructor-arg ref="sonyHead" index="2"/>

		<property name="hand" ref="toshibaHand"/>


	</bean>

	<!--
	в бине baseModel указываем abstract="true"
	т.к. класс BaseModel - абстрактный

	Также можно переопределять определенные свойства в бине наследнике.
	В нашем примере для абстракной модели определена toshibaHand

		<property name="hand" ref="toshibaHand"/>
	, а в бине наследнике t1000
	моежем переопределить как sonyHand
		<property name="hand" ref="sonyHand"/>

	-->




</beans>
